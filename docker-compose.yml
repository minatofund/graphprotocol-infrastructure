version: '2.1'

networks:
  monitor-net:
    driver: bridge

volumes:
    prometheus_data: {}
    grafana_data: {}
    postgres_data: {}
    postgres2_data: {}
    nginx_certs: {}
    nginx_vhost: {}
    nginx_html: {}

services:
  cli:
    build:
      context: ./cli
    container_name: cli
    restart: unless-stopped
    environment:
      GEO_COORDINATES: ${GEO_COORDINATES:-37.75100 -97.82200}
    tty: true
    networks:
      - monitor-net
    volumes:
      - ./cli/scripts:/home/graph/scripts

  graph-node:
    image: graphprotocol/graph-node:v0.22.0
    container_name: graph-node
    depends_on:
      - postgres
    environment:
      postgres_host: postgres
      postgres_user: ${DB_USER:-graph-node}
      postgres_pass: ${DB_PASS:-let-me-in}
      postgres_db: ${DB_NAME:-graph-node}
      ipfs: '${IPFS_ENDPOINT:-https://ipfs.network.thegraph.com}'
      ethereum: '${ETHEREUM}'
      ETHEREUM_START_BLOCK: ${ETHEREUM_START_BLOCK:-7710671}
      RUST_LOG: info
      VIRTUAL_HOST: ${QUERY_HOST:-query.butterflylabs.tk}
      VIRTUAL_PORT: 8000
      LETSENCRYPT_HOST: ${QUERY_HOST:-query.butterflylabs.tk}
    restart: unless-stopped
    ports:
      - 127.0.0.1:8020:8020
      - 8030:8030
      - 8000:8000
    expose:
      - 8001
      - 8000
      - 8030
      - 8040
    networks:
      - monitor-net
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - nginx_certs:/etc/nginx/certs
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
    networks:
      - monitor-net
    restart: unless-stopped
  nginx-ssl:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: nginx-ssl
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - nginx_certs:/etc/nginx/certs
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
    restart: unless-stopped
    networks:
      - monitor-net
    restart: unless-stopped
    environment:
      NGINX_PROXY_CONTAINER: nginx-proxy
      DEFAULT_EMAIL: ${EMAIL:-sebastian.heyden@gmail.com}
  postgres:
    image: postgres
    container_name: postgres
    command: ["postgres", "-cshared_preload_libraries=pg_stat_statements"]
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-graph-node}
      POSTGRES_PASSWORD: ${DB_PASS:-let-me-in}
      POSTGRES_DB: ${DB_NAME:-graph-node}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - monitor-net
    expose:
      - 5432

  postgres2:
    image: postgres
    container_name: postgres2
    command: ["postgres", "-cshared_preload_libraries=pg_stat_statements"]
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-graph-node}
      POSTGRES_PASSWORD: ${DB_PASS:-db-password}
      POSTGRES_DB: ${AGENT_DB_NAME:-indexer-agent}
    volumes:
       - postgres2_data:/var/lib/postgresql/data
    networks:
      - monitor-net
    expose:
      - 5432

  prometheus:
    image: prom/prometheus:v2.20.0
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  alertmanager:
    image: prom/alertmanager:v0.21.0
    container_name: alertmanager
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    expose:
      - 9093
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  nodeexporter:
    image: prom/node-exporter:v1.0.1
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.37.0
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  grafana:
    image: grafana/grafana:7.1.1
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_BRUTE_FORCE_LOGIN_PROTECTION=true
      - postgres_host=postgres
      - postgres_user=${DB_USER:-graph-node}
      - postgres_pass=${DB_PASS:-let-me-in}
      - postgres_db=${DB_NAME:-graph-node}
      - VIRTUAL_HOST=${INDEX_HOST:-index.butterflylabs.tk}
      - VIRTUAL_PORT=3000
      - LETSENCRYPT_HOST=${INDEX_HOST:-index.butterflylabs.tk}
    restart: unless-stopped
    expose:
      - 3000
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  pushgateway:
    image: prom/pushgateway:v1.2.0
    container_name: pushgateway
    restart: unless-stopped
    expose:
      - 9091
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  caddy:
    image: stefanprodan/caddy
    container_name: caddy
    ports:
      - "3000:3000"
      #- "8000:8000"
      - "8001:8001"
      - "9090:9090"
      - "9093:9093"
      - "9091:9091"
    volumes:
      - ./caddy:/etc/caddy
    environment:
      - ADMIN_USER=${ADMIN_USER:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
    restart: unless-stopped
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  indexer-agent:
    image: ghcr.io/graphprotocol/indexer-agent:v0.10.0
    container_name: indexer-agent
    depends_on:
      - graph-node
    expose:
      - 8000
      - 7300
    environment:
      INDEXER_AGENT_MNEMONIC: ${OPERATOR_SEED_PHRASE}
      INDEXER_AGENT_INDEXER_ADDRESS: ${STAKING_WALLET_ADDRESS}
      INDEXER_AGENT_INDEX_NODE_IDS: "graph_node"
      INDEXER_AGENT_INJECT_DAI: "true"
      INDEXER_AGENT_ALLOCATION_CLAIM_THRESHOLD: ${QUERY_FEE_REBATE_CLAIM_THRESHOLD:-0}
      INDEXER_AGENT_ETHEREUM_NETWORK: mainnet
      INDEXER_AGENT_ETHEREUM: ${TXN_RPC}
      INDEXER_AGENT_GRAPH_NODE_QUERY_ENDPOINT: http://graph-node:8000
      INDEXER_AGENT_GRAPH_NODE_STATUS_ENDPOINT: http://graph-node:8030/graphql
      INDEXER_AGENT_GRAPH_NODE_ADMIN_ENDPOINT: http://graph-node:8020
      INDEXER_AGENT_PUBLIC_INDEXER_URL: ${PUBLIC_INDEXER_URL}
      INDEXER_AGENT_INDEXER_GEO_COORDINATES: ${GEO_COORDINATES:-37.75100 -97.82200}
      INDEXER_AGENT_NETWORK_SUBGRAPH_ENDPOINT: https://gateway.network.thegraph.com/network
      INDEXER_AGENT_POSTGRES_HOST: ${AGENT_DB_HOST:-postgres2}
      INDEXER_AGENT_POSTGRES_USERNAME: ${DB_USER:-graph-node}
      INDEXER_AGENT_POSTGRES_PASSWORD: ${DB_PASS:-db-password}
      INDEXER_AGENT_POSTGRES_DATABASE: ${AGENT_DB_NAME:-indexer-agent}
    networks:
      - monitor-net
    restart: unless-stopped

  indexer-service:
    image: ghcr.io/graphprotocol/indexer-service:v0.10.0
    container_name: indexer-service
    depends_on:
      - graph-node
      - indexer-agent
    environment:
      INDEXER_SERVICE_MNEMONIC: ${OPERATOR_SEED_PHRASE}
      INDEXER_SERVICE_INDEXER_ADDRESS: ${STAKING_WALLET_ADDRESS}
      INDEXER_SERVICE_PORT: 7600
      INDEXER_SERVICE_ETHEREUM_NETWORK: mainnet
      INDEXER_SERVICE_ETHEREUM: ${TXN_RPC}
      INDEXER_SERVICE_GRAPH_NODE_QUERY_ENDPOINT: http://graph-node:8000
      INDEXER_SERVICE_GRAPH_NODE_STATUS_ENDPOINT: http://graph-node:8030/graphql
      INDEXER_SERVICE_NETWORK_SUBGRAPH_ENDPOINT: ${SUBGRAPH_ENDPOINT:-https://gateway.network.thegraph.com/network}
      INDEXER_SERVICE_POSTGRES_HOST: postgres2
      INDEXER_SERVICE_POSTGRES_USERNAME: ${DB_USER:-graph-node}
      INDEXER_SERVICE_POSTGRES_PASSWORD: ${DB_PASS:-db-password}
      INDEXER_SERVICE_POSTGRES_DATABASE: ${AGENT_DB_NAME:-indexer-agent}
      INDEXER_SERVICE_WALLET_WORKER_THREADS: ${WORKER_THREADS_PER_INDEXER_SERVICE:-8}
      SKIP_EVM_VALIDATION: "true"
      SERVER_HOST: ${AGENT_DB_HOST:-postgres2}
      SERVER_PORT: 5432
      SERVER_DB_USER: ${DB_USER:-graph-node}
      SERVER_DB_PASSWORD: ${DB_PASS:-db-password}
      SERVER_DB_NAME: ${AGENT_DB_NAME:-indexer-agent}
      VIRTUAL_HOST: ${INDEX_HOST}
      VIRTUAL_PORT: 7600
      LETSENCRYPT_HOST: ${INDEX_HOST}
    expose:
      - 7600
      - 7300
    networks:
      - monitor-net
    restart: unless-stopped